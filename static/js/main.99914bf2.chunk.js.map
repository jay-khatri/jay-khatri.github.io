{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","linkStyle","color","react_default","a","createElement","className","style","target","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAkDeA,0LA7CX,IAAIC,EAAY,CAACC,MAAO,WACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,2BAGEF,EAAAC,EAAAC,cAAA,KAAGE,MAAON,EAAWO,OAAO,SAASC,KAAK,sCAA1C,cAHF,mBAKaN,EAAAC,EAAAC,cAAA,0BALb,KAQAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,8EAGEF,EAAAC,EAAAC,cAAA,KAAGE,MAAON,EAAWQ,KAAK,sBAA1B,wBAHF,2HASAN,EAAAC,EAAAC,cAAA,+IAIEF,EAAAC,EAAAC,cAAA,KAAGE,MAAON,EAAWQ,KAAK,oEAA1B,6CAJF,8CAK6CN,EAAAC,EAAAC,cAAA,oDAL7C,iHASEF,EAAAC,EAAAC,cAAA,wCATF,OAS6CF,EAAAC,EAAAC,cAAA,sCAT7C,6GAYAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,oMArCQK,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99914bf2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    var linkStyle = {color: \"#c9cacc\"};\n    return (\n      <div className=\"App\">\n        <div className=\"App-body\">\n          <p>\n            My name is \n            &nbsp;\n            <a style={linkStyle} target=\"_blank\" href=\"https://linkedin.com/in/jay-khatri\">Jay Khatri</a>\n            &nbsp; \n            and I'm an <strong>engineer</strong>\n            .\n          </p>\n          <h4>ABOUT ME</h4>\n          <p>\n            I'm a student learning Electrical and Computer Engineering at \n            &nbsp;\n            <a style={linkStyle} href=\"https://google.com\">Texas A&M University</a>\n            &nbsp; \n            and I have interests in computer hardware and software, software architecture and \n            robotics & motion planning.\n            &nbsp; \n          </p>\n          <p>\n            I like to say that I have a pretty unique background, so my projects are quite diverse. \n            In high school, I was a captain of the \n            &nbsp;\n            <a style={linkStyle} href=\"https://www.theledger.com/article/LK/20140313/News/608076751/LL/\">2015 FTC World Championship Robotics team</a>\n            , and at the time, I had a strong focus in <strong>mechanical design and electronics.</strong>\n            &nbsp;\n            Since then, I've taken an interest in software engineering, having done a few interships rangin from \n            &nbsp;\n            <strong>full stack development</strong> to <strong> web infrastructure </strong>.\n            In my coursework, I especially enjoy classes related hw/sw co-design, algorithms and operating systems.\n          </p>\n          <h4>EXPERIENCE</h4>\n          <p>\n            Based on past experience, I've really enjoyed working on small teams and having the ability to contribute product \n            decisions as an engineer. I'll upload my internship shortly.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}